{"version":3,"file":"static/js/115.2a38d908.chunk.js","mappings":"kOA6CA,UAvCa,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAS,CACX,IAAMG,EAAS,mCAAG,6GAEQC,EAAAA,EAAAA,gBAAoBJ,GAF5B,OAERK,EAFQ,OAGdN,EAAQM,GAHM,gDAKdC,QAAQC,IAAI,KAAKC,SALH,yDAAH,qDAQfL,GACD,CACF,GAAE,CAACH,IAEJ,IAEMS,EAAWX,EAAKY,OACpBZ,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,GAAlC,OACP,0BACGH,GACC,gBAAKI,IAAG,UANC,oCAMD,OAAgBJ,GAAgBK,IAAKJ,EAAMK,MAAO,OAE1D,gBAAKF,IAAKG,EAAcF,IAAKJ,EAAMK,MAAO,OAE5C,uBAAIL,KACJ,sCAAcC,OAPPC,EADF,KAYT,mEAGF,OAAO,wBAAKN,GACb,C,8DCzCKW,EAAM,+BAENC,EAAoB,mCAAG,oGACJC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iEADI,cACrBG,EADqB,yBAKpBA,EAASC,KAAKC,SALM,2CAAH,qDAQpBC,EAAY,mCAAG,WAAMX,GAAN,uFACIO,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACLL,EADK,8CADJ,cACbQ,EADa,yBAKZA,EAASC,MALG,2CAAH,sDAQZG,EAAc,mCAAG,WAAMC,GAAN,uFACEN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,wEACiDQ,IAFnD,cACfL,EADe,yBAIdA,EAASC,KAAKC,SAJA,2CAAH,sDAOdI,EAAe,mCAAG,WAAMd,GAAN,uFACCO,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACLL,EADK,sDADD,cAChBQ,EADgB,yBAIfA,EAASC,KAAK1B,MAJC,2CAAH,sDAOfgC,EAAe,mCAAG,WAAMf,GAAN,uFACCO,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACLL,EADK,sDADD,cAChBQ,EADgB,yBAIfA,EAASC,KAAKC,SAJC,2CAAH,sDAOfrB,EAAM,CACViB,qBAAAA,EACAK,aAAAA,EACAC,eAAAA,EACAE,gBAAAA,EACAC,gBAAAA,GAGF,K","sources":["pages/Cast/Cast.jsx","shared/api/movies-api.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport api from 'shared/api/movies-api';\nimport defaultImage from 'shared/images/default-profile-image.png';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId) {\n      const fetchCast = async () => {\n        try {\n          const credits = await api.getMovieCredits(movieId);\n          setCast(credits);\n        } catch (data) {\n          console.log(data.message);\n        }\n      };\n      fetchCast();\n    }\n  }, [movieId]);\n\n  const imageURL = 'https://image.tmdb.org/t/p/w500/';\n\n  const elements = cast.length ? (\n    cast.map(({ profile_path, name, character, id }) => (\n      <li key={id}>\n        {profile_path ? (\n          <img src={`${imageURL}${profile_path}`} alt={name} width={150} />\n        ) : (\n          <img src={defaultImage} alt={name} width={150} />\n        )}\n        <p>{name}</p>\n        <p>Character:{character}</p>\n      </li>\n    ))\n  ) : (\n    <p>We don't have any actors for this movie</p>\n  );\n\n  return <ul>{elements}</ul>;\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3';\n\nconst searchTrendingMovies = async () => {\n  const response = await axios.get(\n    `${URL}/trending/movie/day?api_key=a4c507e56effa1158f9e8b1f806bf6ad`\n  );\n\n  return response.data.results;\n};\n\nconst getMovieById = async id => {\n  const response = await axios.get(\n    `${URL}/movie/${id}?api_key=a4c507e56effa1158f9e8b1f806bf6ad`\n  );\n\n  return response.data;\n};\n\nconst getMovieByName = async searchQuery => {\n  const response = await axios.get(\n    `${URL}/search/movie?api_key=a4c507e56effa1158f9e8b1f806bf6ad&query=${searchQuery}`\n  );\n  return response.data.results;\n};\n\nconst getMovieCredits = async id => {\n  const response = await axios.get(\n    `${URL}/movie/${id}/credits?api_key=a4c507e56effa1158f9e8b1f806bf6ad`\n  );\n  return response.data.cast;\n};\n\nconst getMovieReviews = async id => {\n  const response = await axios.get(\n    `${URL}/movie/${id}/reviews?api_key=a4c507e56effa1158f9e8b1f806bf6ad`\n  );\n  return response.data.results;\n};\n\nconst api = {\n  searchTrendingMovies,\n  getMovieById,\n  getMovieByName,\n  getMovieCredits,\n  getMovieReviews,\n};\n\nexport default api;\n"],"names":["useState","cast","setCast","movieId","useParams","useEffect","fetchCast","api","credits","console","log","message","elements","length","map","profile_path","name","character","id","src","alt","width","defaultImage","URL","searchTrendingMovies","axios","response","data","results","getMovieById","getMovieByName","searchQuery","getMovieCredits","getMovieReviews"],"sourceRoot":""}